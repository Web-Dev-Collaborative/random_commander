(function() {
    var app;
    app = angular.module("RandomCommander", [ "ngAnimate" ]), app.controller("DisplayCtrl", [ "$scope", function() {} ]), 
    app.controller("EditorCtrl", [ "$scope", function($scope) {
        return $scope.view = {
            group: "global"
        }, $scope.updateComposition = function(val) {
            return $scope.$parent.composition = val, $scope.$parent.generatePerformance();
        }, $scope.editor = $scope.$parent.editor;
    } ]), app.controller("RandomCommanderCtrl", [ "$scope", "$timeout", "DataLibrary", "Performance", "Presets", function($scope, $timeout, DataLibrary, Performance, Presets) {
        var performance_interval;
        return $scope.library = DataLibrary, $scope.metronome = !1, $scope.toggleMetronome = function() {
            return $scope.metronome = !$scope.metronome;
        }, $scope.menu = !1, $scope.toggleMenu = function() {
            return $scope.menu = !$scope.menu;
        }, $scope.presets = Presets, $scope.composition = Presets.flutter, $scope.performance = Performance.getPerformance($scope.composition), 
        $scope.generatePerformance = function() {
            return $scope.stopPerformance(), $scope.performance = Performance.getPerformance($scope.composition);
        }, $scope.playing = !1, $scope.current_step = 0, performance_interval = void 0, 
        $scope.progress = 0, $scope.playPerformance = function() {
            var beats, composition, index, next_beat, performance, tempo, tempo_time, time;
            return $scope.playing = !0, composition = $scope.composition, tempo = composition.tempo, 
            performance = $scope.performance, beats = composition.measures * composition.beats * composition.resolution / 4, 
            index = 0, tempo_time = 6e4 / tempo, next_beat = function() {
                var beat_count, bps, chord, chord_0, chord_1, clef, decibels, freq, gain, i, metronome, note, notes_size, osc, selector, sequence, sustain, waveforms, _i, _j, _len, _len1, _ref;
                for (i = _i = 0, _len = performance.length; _len > _i; i = ++_i) {
                    if (sequence = performance[i], chord = sequence[index], $scope.metronome && index % (composition.resolution / 4) === 0 && (freq = 0 === index || index / 4 % composition.beats === 0 ? 4100 : 3e3, 
                    metronome = new Tone.OmniOscillator(freq, "pulse"), metronome.setVolume(-30), metronome.toMaster(), 
                    metronome.start(0), metronome.stop("+16n")), clef = 0 === i ? "treble" : "bass", 
                    "object" == typeof chord) for (waveforms = [], decibels = [], composition.clefs.treble && (waveforms.push(composition.clefs.treble.waveform), 
                    decibels.push(composition.clefs.treble.decibels)), composition.clefs.bass && (waveforms.push(composition.clefs.bass.waveform), 
                    decibels.push(composition.clefs.bass.decibels)), bps = tempo / 60, beat_count = chord.length / (1 / composition.resolution), 
                    sustain = beat_count * bps * (1 / composition.resolution), notes_size = chord.notes.length, 
                    chord_0 = performance[0][index], chord_1 = performance[1] ? performance[1][index] : null, 
                    chord_1 && chord !== chord_1 && "object" == typeof chord_1 ? notes_size += chord_1.notes.length : chord !== chord_0 && "object" == typeof chord_0 && (notes_size += chord_0.notes.length), 
                    _ref = chord.notes, _j = 0, _len1 = _ref.length; _len1 > _j; _j++) note = _ref[_j], 
                    osc = new Tone.OmniOscillator(note.freq, waveforms[i]), gain = .1 * (composition.clefs[clef].volume / 10), 
                    decibels = osc.gainToDb(gain / notes_size + gain), osc.setVolume(decibels), osc.toMaster(), 
                    osc.start(0), osc.stop("+" + sustain);
                    selector = "." + clef + " .beat:nth-child(" + (index + 1) + ")", "sus" !== chord && ($("." + clef + " .beat.active").removeClass("active"), 
                    $(selector).addClass("active"));
                }
                return index = (index + 1) % beats;
            }, next_beat(), time = tempo_time / (composition.resolution / 4), performance_interval = window.setInterval(next_beat, time);
        }, $scope.stopPerformance = function() {
            return $scope.playing = !1, $(".beat.active").removeClass("active"), window.clearInterval(performance_interval);
        }, $scope.togglePerformance = function() {
            return $scope.playing === !0 ? $scope.stopPerformance() : $scope.playPerformance();
        };
    } ]), app.directive("gridOptions", [ "$interval", function() {
        return {
            templateUrl: "templates/grid-options.html",
            scope: {
                model: "=",
                options: "=",
                label: "@",
                groupname: "@"
            },
            link: function(scope) {
                return scope.select = function(option) {
                    return scope.model = option.value;
                };
            }
        };
    } ]), app.directive("jsonPaster", [ function() {
        return {
            templateUrl: "templates/json-paster.html",
            scope: {
                model: "=",
                label: "@"
            },
            link: function(scope, elm) {
                return scope.update = function() {
                    return scope.model = JSON.parse(elm.find("textarea").val());
                };
            }
        };
    } ]), app.directive("numberSwitch", [ "$interval", function() {
        return {
            templateUrl: "templates/number-switch.html",
            scope: {
                model: "=",
                min: "@",
                max: "@",
                step: "@",
                label: "@"
            },
            link: function(scope, elm, attrs) {
                var change, promise;
                return promise = void 0, change = function(base, direction) {
                    var max, min, new_val, step;
                    return step = scope.$eval(scope.step || 1), min = scope.$eval(scope.min || 0), max = scope.$eval(scope.max || 1/0), 
                    "+" === direction ? (new_val = max >= base + step ? base + step : base, scope.model = new_val) : "-" === direction ? (new_val = base - step >= min ? base - step : base, 
                    scope.model = new_val) : console.log("no direction provided");
                }, scope.changeClick = function(direction) {
                    return change(scope.model, direction);
                }, scope.validate = function(min, max) {
                    var float;
                    return min = scope.$eval(attrs.min || 0), max = scope.$eval(attrs.max || 1/0), float = parseFloat(scope.model), 
                    scope.model = isNaN(float) || void 0 === float ? parseFloat(min) : scope.model < min ? parseFloat(min) : scope.model > max ? parseFloat(max) : float;
                };
            }
        };
    } ]), app.service("DataLibrary", [ function() {
        return {
            resolutions: [ {
                name: "1/4",
                value: 4
            }, {
                name: "1/8",
                value: 8
            }, {
                name: "1/16",
                value: 16
            } ],
            notes: [ {
                name: "C",
                value: 0
            }, {
                name: "C#",
                value: 1
            }, {
                name: "D",
                value: 2
            }, {
                name: "D#",
                value: 3
            }, {
                name: "E",
                value: 4
            }, {
                name: "F",
                value: 5
            }, {
                name: "F#",
                value: 6
            }, {
                name: "G",
                value: 7
            }, {
                name: "G#",
                value: 8
            }, {
                name: "A",
                value: 9
            }, {
                name: "A#",
                value: 10
            }, {
                name: "B",
                value: 11
            } ],
            silence: [ {
                name: "0%",
                value: 0
            }, {
                name: "10%",
                value: 1
            }, {
                name: "20%",
                value: 2
            }, {
                name: "30%",
                value: 3
            }, {
                name: "40%",
                value: 4
            }, {
                name: "50%",
                value: 5
            }, {
                name: "60%",
                value: 6
            }, {
                name: "70%",
                value: 7
            }, {
                name: "80%",
                value: 8
            }, {
                name: "90%",
                value: 9
            }, {
                name: "100%",
                value: 10
            } ],
            values: [ {
                name: "Whole",
                size: 1,
                denominator: 1
            }, {
                name: "Half",
                size: .5,
                denominator: 2
            }, {
                name: "Quarter",
                size: .25,
                denominator: 4
            }, {
                name: "Eighth",
                size: 1 / 8,
                denominator: 8
            }, {
                name: "Sixteenth",
                size: 1 / 16,
                denominator: 16
            } ],
            intervals: [ {
                name: "Perf Unison",
                interval: 1
            }, {
                name: "Min 2nd",
                interval: 2
            }, {
                name: "Maj 2nd",
                interval: 3
            }, {
                name: "Min 3rd",
                interval: 4
            }, {
                name: "Maj 3rd",
                interval: 5
            }, {
                name: "Perf 4th",
                interval: 6
            }, {
                name: "Tritone",
                interval: 7
            }, {
                name: "Perf 5th",
                interval: 8
            }, {
                name: "Min 6th",
                interval: 9
            }, {
                name: "Maj 6th",
                interval: 10
            }, {
                name: "Min 7th",
                interval: 11
            }, {
                name: "Maj 7th",
                interval: 12
            } ],
            chords: [ {
                name: "Monad",
                value: 1
            }, {
                name: "Dyad",
                value: 2
            }, {
                name: "Triad",
                value: 3
            }, {
                name: "Quartad",
                value: 4
            }, {
                name: "Pentad",
                value: 5
            } ],
            octaves: [ {
                name: "Low",
                value: 1
            }, {
                name: "Middle",
                value: 2
            }, {
                name: "High",
                value: 3
            } ],
            baseoctaves: [ {
                name: "1",
                value: 1
            }, {
                name: "2",
                value: 2
            }, {
                name: "3",
                value: 3
            }, {
                name: "4",
                value: 4
            }, {
                name: "5",
                value: 5
            }, {
                name: "6",
                value: 6
            }, {
                name: "7",
                value: 7
            }, {
                name: "8",
                value: 8
            } ],
            waveforms: [ {
                name: "Sine",
                value: "sine"
            }, {
                name: "Square",
                value: "square"
            }, {
                name: "Sawtooth",
                value: "sawtooth"
            }, {
                name: "Triangle",
                value: "triangle"
            }, {
                name: "Pulse",
                value: "pulse"
            } ],
            frequencies: [ [ 16.351, 17.324, 18.354, 19.445, 20.601, 21.827, 23.124, 24.499, 25.956, 27.5, 29.135, 30.868 ], [ 32.703, 34.648, 36.708, 38.891, 41.203, 43.654, 46.249, 48.999, 51.913, 55, 58.27, 61.735 ], [ 65.406, 69.296, 73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, 110, 116.541, 123.471 ], [ 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942 ], [ 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164, 493.883 ], [ 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880, 932.328, 987.767 ], [ 1046.502, 1108.731, 1174.659, 1244.508, 1318.51, 1396.913, 1479.978, 1567.982, 1661.219, 1760, 1864.655, 1975.533 ], [ 2093.005, 2217.461, 2349.318, 2489.016, 2637.021, 2793.826, 2959.955, 3135.964, 3322.438, 3520, 3729.31, 3951.066 ], [ 4186.009, 4434.922, 4698.636, 4978.032, 5274.042, 5587.652, 5919.91, 6271.928, 6644.876, 7040, 7458.62, 7902.132 ], [ 8372.018, 8869.844, 9397.272, 9956.064, 10548.084, 11175.304, 11839.82, 12543.856, 13289.752, 14080, 14917.24, 15804.264 ] ]
        };
    } ]), app.service("Performance", [ "DataLibrary", function(DataLibrary) {
        return {
            getPerformance: function(composition) {
                var ChancePkg, blank, chord, chordContainsFreq, clef, duration, index, interval, new_chord, new_note, new_octave, note, note_decimal, note_length, note_whole, note_width, octave, random, randomVal, res_value, sequence, sequences, step_length, temp_duration, temp_freqs, value, _i, _ref;
                chordContainsFreq = function(freq, notes) {
                    var note, _i, _len;
                    for (_i = 0, _len = notes.length; _len > _i; _i++) if (note = notes[_i], note.freq === freq) return !0;
                    return !1;
                }, ChancePkg = function(vals, key) {
                    var amount, i, new_vals, new_vals_chances, total, val, vals_count, value, _i, _j, _len, _len1;
                    for (new_vals = [], vals_count = 0, i = _i = 0, _len = vals.length; _len > _i; i = ++_i) value = vals[i], 
                    value > 0 && (vals_count += value, new_vals.push([ DataLibrary[key][i], value ]));
                    for (new_vals_chances = [], total = 0, i = _j = 0, _len1 = new_vals.length; _len1 > _j; i = ++_j) val = new_vals[i], 
                    amount = total + val[1] / vals_count * 1e5, i + 1 === new_vals.length && (amount = 1e5), 
                    new_vals_chances.push(amount), total = amount;
                    return {
                        chances: new_vals_chances,
                        vals: new_vals
                    };
                }, randomVal = function(chance_pkg) {
                    var chance, i, random, _i, _len, _ref;
                    for (random = 1e5 * Math.random(), _ref = chance_pkg.chances, i = _i = 0, _len = _ref.length; _len > _i; i = ++_i) if (chance = _ref[i], 
                    chance > random) return chance_pkg.vals[i];
                }, duration = composition.measures * composition.beats * (composition.resolution / 4), 
                sequences = [];
                for (index in composition.clefs) {
                    for (clef = composition.clefs[index], sequence = [], temp_duration = duration, clef.values_pkg = new ChancePkg(clef.values, "values"), 
                    clef.intervals_pkg = new ChancePkg(clef.intervals, "intervals"), clef.octaves_pkg = new ChancePkg(clef.octaves, "octaves"), 
                    clef.chords_pkg = new ChancePkg(clef.chords, "chords"); temp_duration > 0; ) if (random = 10 * Math.random(), 
                    random > clef.silence) {
                        for (chord = randomVal(clef.chords_pkg)[0].value, value = randomVal(clef.values_pkg)[0].denominator, 
                        note_length = 1 / value, step_length = 1 / composition.resolution, note_length / step_length >= temp_duration && (value = 1 / temp_duration / step_length, 
                        note_length = 1 / value), note_whole = Math.floor(note_length / step_length), note_decimal = Math.floor(100 * (note_length / step_length - note_whole)), 
                        note_width = note_whole + "_" + note_decimal, new_chord = {
                            length: note_length,
                            note_width: note_width,
                            notes: []
                        }, temp_freqs = []; new_chord.notes.length < chord; ) interval = randomVal(clef.intervals_pkg)[0].interval, 
                        octave = randomVal(clef.octaves_pkg)[0].value, interval += composition.root, interval > 12 && (interval -= 12), 
                        new_octave = clef.baseoctave + -1 * (2 - octave), note = DataLibrary.frequencies[new_octave - 1][interval - 1], 
                        new_note = {
                            freq: note,
                            "int": interval,
                            octave: octave
                        }, -1 === temp_freqs.indexOf(note) && (temp_freqs.push(note), new_chord.notes.push(new_note));
                        if (sequence.push(new_chord), res_value = Math.floor(1 / value / (1 / composition.resolution)), 
                        res_value > 1) for (blank = _i = 1, _ref = res_value - 1; _ref >= 1 ? _ref >= _i : _i >= _ref; blank = _ref >= 1 ? ++_i : --_i) sequence.push("sus");
                        temp_duration -= res_value;
                    } else sequence.push(0), temp_duration--;
                    sequences.push(sequence);
                }
                return sequences;
            }
        };
    } ]), app.service("Presets", [ function() {
        return {
            flutter: {
                name: "Flutter",
                measures: 4,
                tempo: 120,
                beats: 4,
                resolution: 16,
                root: 0,
                clefs: {
                    treble: {
                        values: [ 0, 0, 0, 0, 10 ],
                        intervals: [ 10, 0, 0, 10, 0, 6, 0, 10, 4, 0, 5, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 5, 10, 5 ],
                        silence: 0,
                        baseoctave: 6,
                        waveform: "triangle",
                        volume: 6
                    },
                    bass: {
                        values: [ 10, 10, 10, 10, 0 ],
                        intervals: [ 10, 10, 0, 10, 0, 10, 0, 10, 10, 0, 10, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 0, 10, 0 ],
                        silence: 0,
                        baseoctave: 3,
                        waveform: "sawtooth",
                        volume: 10
                    }
                }
            },
            glory: {
                name: "Glory",
                measures: 16,
                tempo: 120,
                beats: 4,
                resolution: 16,
                root: 7,
                clefs: {
                    treble: {
                        values: [ 5, 0, 10, 5, 0 ],
                        intervals: [ 10, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0 ],
                        chords: [ 10, 5, 5, 0, 0 ],
                        octaves: [ 5, 10, 5 ],
                        silence: 0,
                        baseoctave: 6,
                        waveform: "sine",
                        volume: 6
                    },
                    bass: {
                        values: [ 0, 0, 0, 0, 10 ],
                        intervals: [ 10, 0, 0, 10, 0, 10, 0, 10, 0, 0, 10, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 0, 10, 3 ],
                        silence: 0,
                        baseoctave: 3,
                        waveform: "triangle",
                        volume: 10
                    }
                }
            },
            wander: {
                name: "Wander",
                measures: 4,
                tempo: 110,
                beats: 4,
                resolution: 16,
                root: 1,
                clefs: {
                    treble: {
                        values: [ 5, 5, 5, 5, 5 ],
                        intervals: [ 10, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 0 ],
                        chords: [ 10, 5, 5, 0, 0 ],
                        octaves: [ 5, 10, 5 ],
                        silence: 0,
                        baseoctave: 6,
                        waveform: "triangle",
                        volume: 6
                    },
                    bass: {
                        values: [ 10, 10, 10, 10, 0 ],
                        intervals: [ 10, 5, 0, 10, 0, 10, 0, 10, 5, 0, 10, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 0, 10, 0 ],
                        silence: 0,
                        baseoctave: 3,
                        waveform: "triangle",
                        volume: 10
                    }
                }
            },
            jonny: {
                name: "Jonny",
                measures: 2,
                tempo: 160,
                beats: 7,
                resolution: 16,
                root: 6,
                clefs: {
                    treble: {
                        values: [ 0, 0, 0, 0, 10 ],
                        intervals: [ 10, 0, 0, 10, 0, 6, 0, 10, 4, 0, 5, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 5, 10, 5 ],
                        silence: 0,
                        baseoctave: 6,
                        waveform: "triangle",
                        volume: 6
                    },
                    bass: {
                        values: [ 0, 0, 10, 0, 0 ],
                        intervals: [ 10, 0, 0, 10, 0, 6, 0, 10, 4, 0, 5, 0 ],
                        chords: [ 10, 0, 0, 0, 0 ],
                        octaves: [ 5, 10, 5 ],
                        silence: 0,
                        baseoctave: 5,
                        waveform: "triangle",
                        volume: 7
                    }
                }
            }
        };
    } ]);
}).call(this);